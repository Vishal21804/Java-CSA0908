import java.util.LinkedList;
import java.util.Queue;
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) { 
        this.val = val; 
        this.left = left; 
        this.right = right; 
    }
}

public class R192210513 {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return false;
        }
        if (root.left == null && root.right == null) {
            return root.val == targetSum;
        }
        int newTargetSum = targetSum - root.val;
        return hasPathSum(root.left, newTargetSum) || hasPathSum(root.right, newTargetSum);
    }

    public static void main(String[] args) {
        R192210513 solution = new R192210513();
        TreeNode root = new TreeNode(5,
            new TreeNode(4, 
                new TreeNode(11, 
                    new TreeNode(7), 
                    new TreeNode(2)
                )
            ),
            new TreeNode(8, 
                new TreeNode(13), 
                new TreeNode(4, 
                    null, 
                    new TreeNode(1)
                )
            )
        );
        boolean result = solution.hasPathSum(root, 22);
        System.out.println(result);
    }
}
